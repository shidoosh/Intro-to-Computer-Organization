Compile the following function:

  _Bool
  testovf (long n)
  {
    return n + 9223372036854775807 < n;
  }
for the x86-64 in three ways: (1) with -O2, (2) with -O2 -fwrapv, (3) with -O2 -fsanitize=undefined. Compare the resulting assembly-language files, and describe and justify the differences that you see.


(1) with -O2
0000000000000000 <testovf>:
   0:	31 c0                	xor    %eax,%eax
   2:	c3                   	retq   
	
	With just -O2, the assembly code simply performs an xor with a register and itself. This clears the register such that the bits are all zeros. Thus, this function will always return 0.  	
This happens as the compiler assumes overflow. 


(2) with -O2 -fwrapv
0000000000000000 <testovf>:
   0:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
   7:	ff ff 7f 
   a:	48 01 f8             	add    %rdi,%rax
   d:	48 39 f8             	cmp    %rdi,%rax
  10:	0f 9c c0             	setl   %al
  13:	c3                   	retq  

	Compiling with -fwrap in addtion to -O2, the assembly is more complex as opposed to just using the latter. In this case, the source code is reflected in the machine instructions. The add command, as expected, adds n to 9223372036854775807. The compare command then considers the result, that is, if the sum is less than n itself. The set command then sets the lower bits of the result register to either 0 or 1, as the function returns a boolean. The -fwrapv flag allows the source code to be reflected, as it instructs the compiler what to explicitly do with overflow, as opposed to the machine level implementation of testovf with just -O2 (1). 




(3) with -O2 -fsanitize=undefined
0000000000000000 <testovf>:
   0:	55                   	push   %rbp
   1:	53                   	push   %rbx
   2:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
   9:	ff ff 7f 
   c:	48 89 fd             	mov    %rdi,%rbp
   f:	48 89 fb             	mov    %rdi,%rbx
  12:	48 83 ec 08          	sub    $0x8,%rsp
  16:	48 01 d5             	add    %rdx,%rbp
  19:	70 0d                	jo     28 <testovf+0x28>
  1b:	48 39 dd             	cmp    %rbx,%rbp
  1e:	0f 9c c0             	setl   %al
  21:	48 83 c4 08          	add    $0x8,%rsp
  25:	5b                   	pop    %rbx
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   
  28:	48 89 fe             	mov    %rdi,%rsi
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	callq  35 <testovf+0x35>
  35:	eb e4                	jmp    1b <testovf+0x1b>
	The -fsanitize=undefined command essentially catches signed overflow. Because of this behavior, the machine-level instructions are more cautious per se, using jump commands to deal with the potential undefined result. Most notably, the jo command considers overflow explicitly in its very nature. In this implementation, therefore, the function jumps to a mov command that effectively handles the overflow in a defined manner. 
